* 用例
#+begin_src plantuml :file usecase.png
:玩家: as player
(玩uno) as playUno

player -> playUno
#+end_src

* 类图

** 客户端
#+begin_src plantuml :file client_class.png
class CardGroup {
    cards : Card[]
    rect : {x, y, width, height}
    __
    + void appendCard(Card)
    + void sendOut(Card)
    + void reDraw(TouchEvent)
    + bool hitText(TouchEvent)
    + Card selectedCard(TouchEvent)
}

class Card {
    name : String
    frame : {x, y, width, height}
    __
    + bool hitTest(TouchEvent)
    + bool match(LastCard)
}

class LastCard {
    name : String
    color : Color
}

class OtherPlayer {
    name : String
    frame :  {x, y, width, height}
    CardNum : int
    __
    + void reDraw()
}

class Menu {
    + Card requestCard()
    + void uno()
    + void question+4()
    + void noQuestion+4()
    + void reDraw() 
    + void activeAction()
}

class Sence {
    player : CardGroup
    others : OtherPlayer[3] 
    frame : {x, y, width, height}
    menu : Menu
    __
    + void onActiveForNewTurn()
    + void onActiveForQuestion+4()
}

CardGroup -> Card
Card <|-- LastCard
Sence --> CardGroup
Sence --> OtherPlayer
Sence -> Menu

#+end_src

** 服务器端
#+begin_src plantuml :file server_class.png
class Card {
    name : String
}

class LastCard {
    name : String
    color : Color
}

class Player {
    name : String
    client : socket
    __
    + void onSendCard(Card)
    + void onUno()
    + void onRequestCard()
    + void onQuestion+4()
    + void onNoQuestion+4()
}


class RemindCards {
    cards: Card[]
    __
    + bool hasEnoughCards(Number)
    + void sendCard(Player, Card[])
}

class Situation {
    remindCards : RemindCards
    players : Player[4]
    directory: {顺时针, 逆时针}
    activePlayer: Index
    lastCard : LastCard
    __
    + bool isActivePlayer()
    + void activePlayerForNetTurn()
    + void activePlayerFor+4()
    + void fetchCard(Card)
    + void BoradCastSendOut(Player, Card)
    + void BoradCastsendUno()

}

Card <|-- LastCard
Situation --> RemindCards
Situation --> Player
#+end_src

* 时序
** 图例
#+begin_src plantuml :file time.png
participant 客户端 as Client
participant 服务器 as Server

Client -> Server: 服务器计录当前用户已准备
alt 还有用户未准备
    Client x<-- Server : 无后续操作
else 所有用户已准备
    Client <-- Server: 发牌
    note right
        单播：
        当前用户手牌
        其与用户手牌数
        当前激活用户
        首张牌
    end note
end
#+end_src


#+begin_src plantuml :file active.png
participant 激活用户 as Active
participant 服务器 as Server
participant 非激活用户 as Other

== 用户摸牌 ==
Active -> Server: 摸牌
activate Server
Server --> Other: 更新用户牌数
Active <-- Server: 发牌1张牌
deactivate Server

== 用户过牌 ==
Active -> Server: 过牌
activate Server
Server --> Other: 激活下个用户
deactivate Server

== 用户Uno == 
Active -> Server: uno
activate Server
Server --> Other: 提示用户uno
deactivate Server

== 用户出牌（普通牌） == 
Active -> Server: 出牌"XX"
activate Server
Server --> Other: 更新用户牌数，当前牌
Server --> Other: 激活下个用户
hnote over Active: 结束本轮
deactivate Server

== 用户出牌（旋转牌） ==
Active -> Server: 出牌"XX"
activate Server
Server -> Server: 调整出牌方向
Server --> Other: 更新用户牌数，当前牌，显示旋转牌动画
Server --> Other: 激活下个用户
hnote over Active: 结束本轮
deactivate Server

== 用户出牌（阻挡牌） ==
Active -> Server: 出牌"XX"
activate Server
Server --> Other: 更新用户牌数，当前牌，显示阻挡牌动画
Server --> Other: 激活第二个用户
hnote over Active: 结束本轮
deactivate Server

== 用户出牌（+2牌） ==
Active -> Server: 出牌"XX"
activate Server
Server --> Other: 更新用户牌数，当前牌，显示阻挡牌动画
Server --> Other: 发2张牌到下个用户
Server --> Other: 激活第二个用户
hnote over Active: 结束本轮
deactivate Server

== 用户出牌（万用牌） ==
Active -> Server: 出牌"XX"
activate Server
Server --> Other: 更新用户牌数，当前牌（携带万用牌选择色)
Server --> Other: 激活下个用户
hnote over Active: 结束本轮
deactivate Server


== 用户出牌（王牌） ==
Active -> Server: 出牌"XX"
activate Server
Server --> Other: 更新用户牌数，当前牌（携带王牌选择色)
Server -> Other: 激活下个用户(王牌质疑模式)
alt 不质疑
    Server <-- Other: 不质疑
    Server --> Other: 发4张牌到下个用户
else 质疑
    Server <-- Other: 质疑
    Active <- Server: 要求提供质疑结果
    alt 质疑生成
        Active --> Server: 质疑生功
        Active <-- Server: 发4张牌
    else 质疑失败
        Active --> Server: 质疑失败
        Server --> Other: 发6张牌结下一用户
    end 
end

Server --> Other: 激活第二个用户
hnote over Active: 结束本轮

deactivate Server
#+end_src

** 说明
*** 客户端实现以下监听事件
    1. socket.on('addAsCards', function(info))               // 服务器向用户发牌

       info 格式: ["XX", "XX"]

       收到的牌的张数，由数组个数决定。

       +2两张，王牌4张，摸牌1张

       收到牌后更新用户手牌

    2. socket.on('updateUserCardCount', function(info))      // 更新某一用户的手牌数

       info 格式: {username : number}

       更新相应用户的手牌数

    3. socket.on('userUno', function(info))                  // 某一用户uno

       info 格式: "username"

       相应用户uno 

    4. socket.on('updateLastCard', function(info))           // 更新出版堆

       info 格式: "r1"

       出牌堆显示相应牌

       注：如为特殊牌，则显示相应动画，万应牌与王牌的底色，改为选中色

    5. socket.on('activeByNewTurn', function())              // 轮到当前用户出牌

       用户可以出牌，摸牌，uno

       用户选择摸牌后，“摸牌”按钮变成“过牌”，用户可过牌

       用户出牌或过牌后，取消激活状态

    6. socket.on('activeByW+4', function())                  // 当前用户选择是否质疑王牌

       用户可以选择，质疑，不质疑

       用户选择后，取消激活状态

    7. socket.on('requireResult', function())                  // 要求用户提供质疑结果

       emit('uploadResult', true)

    8. socket.on('statstics', function())                  // 要求用户统计积分
       
       emit('uploadScore', 100)

    9. socket.on('scoreList', function())                  // 展示积分
       
       更新各用户积分

*** 服务器实现以下监听事件

   1. socket.on('ready', function())                      // 用户准备
      
      如果不足4人，无操作

      如果等于4人，单播各用户emit("addAsCards", ["XX", "XX", "XX", "XX", "XX", "XX", "XX"])

      组播各用户emit('updateUserCardCount', +7)

      组播emit('updateLastCard', "XX")

   2. socket.on('getCard', function())                      // 激活用户摸牌

      单播激活用户emit('addAsCards', "XX")

      组播emit('updateUserCardCount', +1)

   3. socket.on('pass', function())                         // 激活用户过牌
       
      直接激活下个用户emit('activeByNetTurn')

   4. socket.on('uno', function())                          // 激活用户uno

      组播emit('userUno', "username")

   5. socket.on('showAHand', function(info))                // 激活用户出牌

      info 格式: "r1"
      
      对应出牌逻辑

      1. 普通牌

	 组播emit('updateUserCardCount', -1)

	 组播emit('updateLastCard', "XX")

	 单播激活下个用户emit('activeByNetTurn')

      2. 旋转牌

	 变换方向标识

	 组播emit('updateUserCardCount', -1)

	 组播emit('updateLastCard', "XX")

	 单播激活下个用户emit('activeByNetTurn')

      3. 阻挡牌

	 组播emit('updateUserCardCount', -1)

	 组播emit('updateLastCard', "XX")

	 单播激活第二用户emit('activeByNetTurn')

      4. +2牌

	 组播emit('updateUserCardCount', -1)

	 组播emit('updateLastCard', "XX")

	 单播下一用户emit('addAsCards', ["XX", "XX"])

	 组播下一用户emit('updateUserCardCount', +2)

	 单播激活第二用户emit('activeByNetTurn')

      5. 万用牌

         组播emit('updateUserCardCount', -1)
	  
	 组播emit('updateLastCard', "XX")

	 单播激活下一用户emit('activeByNetTurn')

      6. 王牌
         组播emit('updateUserCardCount', -1)
	  
	 组播emit('updateLastCard', "XX")

	 单播激活下一用户emit('activeByW+4')

	 1. 不质疑

	    单播下一用户emit('addAsCards', ["XX", "XX", "XX", "XX"])
	  
	    组播下一用户emit('updateUserCardCount', +4)

	 2. 质疑
	     
	    emit('requireResult') 要求激活用户上传质疑结果

	    ------------------------------------------

	    socket.on('uploadResult', function(info))

	    info 格式: true/false

	    如果质疑成功，则激活用户emit("addAsCards", ["XX", "XX", "XX", "XX"])

	    否则，下一用户emit("addAsCards", ["XX", "XX", "XX", "XX", "XX", "XX"])

   6. socket.on('uploadScore', function())                      // 得到积分
       
      组播emit('scoreList')
